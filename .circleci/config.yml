version: 2
jobs:
  build:
    docker:
      - image: circleci/node:12.0
    
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install dependencies
          command: cd my-app && npm install
      - run:
          name: ng install
          command: npm install ng
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Build the application
          command: cd my-app && npm run build && ls && pwd
             
#       - run:
#       #Get all pre-requisites
#           command: |
#             yum install python3
#             pip install awscli==1.14.37
#             aws s3 sync ./ s3://production-another-app

      - persist_to_workspace:
          root: ./
          paths:
#             - package.json
#             - node_modules
#             - src
              - my-app/dist
#               - "**/*"
  deploy-test:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ./
      - run:
          #Get all pre-requisites
          command: |
            apk add --no-cache py-pip=9.0.0-r1
            pip install awscli==1.14.37
            aws_login=`aws ecr get-login --no-include-email --region us-east-1`
            eval $aws_login
            aws s3 sync ./my-app/dist/angular-nodejs-example/ s3://test-another-app
  deploy-production:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ./
      - run:
          #Get all pre-requisites
          command: |
            apk add --no-cache py-pip=9.0.0-r1
            pip install awscli==1.14.37
            aws_login=`aws ecr get-login --no-include-email --region us-east-1`
            eval $aws_login
            aws s3 sync ./my-app/dist/angular-nodejs-example/ s3://production-another-app
            apt-get update && sudo apt-get install -y gnupg software-properties-common curl
            curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
            apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            apt-get update && apt-get install terraform
            terraform init
            terraform plan
#   deploy-terraform:
#     docker:
#       - image: circleci/python:3.6.1
#     working_directory: ~/project
#     environment:
#       TF_IN_AUTOMATION: true
#     orbs:
#       terraform: circleci/terraform@3.0.1
#     jobs:
#       - terraform/validate:
#           checkout: true
#           context: terraform
#       - terraform/plan:
#           checkout: true
#           context: terraform
#           persist-workspace: true
#           requires:
#             - terraform/validate
#       - terraform/apply:
#           attach-workspace: true
#           context: terraform
#           filters:
#             branches:
#               only: master
#           requires:
#             - terraform/plan
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build
      - deploy-test:
          requires:
            - build
          filters:
            branches:
              only:
                - test
      - deploy-production:
          requires:
            - build
          filters:
            branches:
              only:
                - master
#       - deploy-terraform:
#           requires:
#             - build
#           filters:
#             branches:
#               only:
#                 - master
